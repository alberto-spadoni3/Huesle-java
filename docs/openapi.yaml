openapi: 3.0.3
info:
  title: Huesle API
  description:
    This API, titled "Huesle API", serves as the backend for the Huesle application.
    It provides a set of endpoints for managing user accounts, including registration, login, logout, and profile settings updates.
    It also includes endpoints for game management, such as searching for matches, joining private matches, leaving current matches, and making guesses in a match.
    Additionally, it provides endpoints for retrieving user statistics and match details.
    The API uses JWT for authentication.
  contact:
    name: Alberto Spadoni
    email: alberto.spadoni3@studio.unibo.it
  version: 1.0.1
servers:
  - url: http://localhost:8080/api
    description: Huesle web service
tags:
  - name: user
    description: Endpoints for user operations
  - name: game
    description: Endpoints for game operations
  - name: settings
    description: Endpoints for user settings
  - name: stats
    description: Endpoints for user statistics
paths:
  /user/register:
    post:
      tags:
        - user
      summary: Register a new user
      requestBody:
        description: User registration data
        content:
          'application/json':
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                  format: password
        required: true
      responses:
        '201':
          $ref: '#/components/responses/SuccessResponse'
        '409':
          description: Username or email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /user/login:
    post:
      tags:
        - user
      summary: Log in a user
      requestBody:
        description: User login data
        content:
          'application/json':
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
        required: true
      responses:
        '200':
          description: User authentication data and profile picture ID
          headers:
            Set-Cookie:
              description: Cookie HttpOnly containing the JWT refresh token
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  profilePicID:
                    type: integer
                  email:
                    type: string
                    format: email
        '401':
          description: Invalid credentials or user disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /user/logout:
    get:
      tags:
        - user
      summary: Log out a user
      parameters:
        - name: jwtRefreshToken
          in: cookie
          required: false
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '204':
          description: The user was already logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /user/refreshToken:
    get:
      summary: Refresh the user's accessToken
      tags:
        - user
      parameters:
        - name: jwtRefreshToken
          in: cookie
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The user's accessToken was successfully refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  newAccessToken:
                    type: string
                  profilePicID:
                    type: integer
                  email:
                    type: string
                    format: email
        '403':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /user/delete:
    delete:
      tags:
        - user
      summary: Delete a user
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '400':
          description: Problems in deleting the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/game/getMatch:
    get:
      summary: Get the match with the given ID
      tags:
        - game
      security:
        - jwtAuth: [ ]
      parameters:
        - name: matchId
          in: query
          required: true
          description: The identifier of the match to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The found match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '404':
          description: No match with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/game/getMatches:
    get:
      summary: Get all matches the user is in, including if he was pending for one
      tags:
        - game
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          description: The found matches
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/Match'
                  pending:
                    type: boolean
        '404':
          description: No matches returned because the user was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/game/searchMatch:
    post:
      summary: Search for a match or create a new one
      tags:
        - game
      security:
        - jwtAuth: [ ]
      requestBody:
        description: Whether or not the user wants to search for a private match
        content:
          'application/json':
            schema:
              type: object
              required:
                - secret
              properties:
                secret:
                  type: boolean
        required: true
      responses:
        '200':
          description: Searching for an opponent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
        '201':
          description: A new public match was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
        '400':
          description: The user is already searching for a match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
    delete:
      tags:
        - game
      summary: Stop searching for a private match
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          description: The user successfully stopped searching for a match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
        '400':
          description: The user is not searching for a match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/game/joinPrivateMatch:
    post:
      summary: Join a private match
      tags:
        - game
      security:
        - jwtAuth: [ ]
      requestBody:
        description: The access code of the private match to join
        content:
          application/json:
            schema:
              type: object
              required:
                - matchAccessCode
              properties:
                matchAccessCode:
                  type: integer
                  example: 34217
        required: true
      responses:
        '201':
          description: Private match created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
        '404':
          description: No match with the given access code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/game/leaveMatch:
    post:
      summary: Leave the current match
      tags:
        - game
      security:
        - jwtAuth: [ ]
      requestBody:
        required: true
        description: The ID of the match to leave
        content:
          application/json:
            schema:
              type: object
              required:
                - matchId
              properties:
                matchId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: The user left the match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
        '400':
          description: The user is not in a match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/game/doGuess:
    put:
      summary: Make a guess in the current match
      tags:
        - game
      security:
        - jwtAuth: [ ]
      requestBody:
        required: true
        description: The guess to make and the ID of the related match
        content:
          application/json:
            schema:
              type: object
              required:
                - matchId
                - sequence
              properties:
                matchId:
                  type: string
                  format: uuid
                sequence:
                  $ref: '#/components/schemas/ColorSequence'
      responses:
        '200':
          description: Guess made successfully. Returns the hints and the new match status
          content:
            application/json:
              schema:
                type: object
                properties:
                  rightP:
                    type: integer
                    description: Number of correct colors in the correct position
                  rightC:
                    type: integer
                    description: Number of correct colors in the wrong position
                  status:
                    $ref: '#/components/schemas/MatchStatus'
        '400':
          description: Problems with the selected match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/settings/updatePassword:
    post:
      summary: Update the user's password
      tags:
        - settings
      security:
        - jwtAuth: [ ]
      requestBody:
        required: true
        description: The old and new password
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          description: The old password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
        '404':
          description: Problems with the password update - user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/settings/updateEmail:
    post:
      summary: Update the user's email
      tags:
        - settings
      security:
        - jwtAuth: [ ]
      requestBody:
        required: true
        description: The new email address
        content:
          application/json:
            schema:
              type: object
              required:
                - newEmail
              properties:
                newEmail:
                  type: string
                  format: email
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '409':
          description: The new email address is already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
        '404':
          description: Problems with the email update - user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/settings/profilePicture:
    put:
      summary: Update the user's profile picture
      tags:
        - settings
      security:
        - jwtAuth: [ ]
      requestBody:
        required: true
        description: The ID of the user's new profile picture
        content:
          application/json:
            schema:
              type: object
              required:
                - profilePicID
              properties:
                profilePicID:
                  type: integer
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '404':
          description: Problems with the profile picture update - user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/settings/profileSettings:
    get:
      summary: Retrieve the user's profile settings
      tags:
        - settings
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          description: The user object, from which the profile settings can be extracted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Problems with the profile settings retrieval - user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
    put:
      summary: Update the user's profile settings
      tags:
        - settings
      security:
        - jwtAuth: [ ]
      requestBody:
        required: true
        description: The new profile settings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessibilitySettings'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '404':
          description: Problems with the profile settings update - user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
  /protected/stats/userStats:
    get:
      summary: Get the user's statistics
      tags:
        - stats
      security:
        - jwtAuth: [ ]
      responses:
        '200':
          description: The user's statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '400':
          description: Problems with the statistics retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSchema'
components:
  responses:
    SuccessResponse:
      description: The operation was completed successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  schemas:
    SimpleSchema:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    Hint:
      type: object
      properties:
        rightPositions:
          type: integer
          description: Number of correct colors in the correct position
        rightColours:
          type: integer
          description: Number of correct colors in the wrong position
    ColorSequence:
      type: array
      items:
        type: string
        enum: [ crimson, forestgreen, coral, mediumblue, rebeccapurple, gold ]
      example: [ "crimson", "forestgreen", "coral", "mediumblue" ]
    Attempt:
      type: object
      properties:
        colorSequence:
          $ref: '#/components/schemas/ColorSequence'
        hints:
          $ref: '#/components/schemas/Hint'
        madeBy:
          type: string
          description: Username of the player who made the attempt
    AccessibilitySettings:
      type: object
      properties:
        darkMode:
          type: boolean
          description: Indicates if dark mode is enabled
        colorblindMode:
          type: boolean
          description: Indicates if colorblind mode is enabled
    User:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          format: password
          description: Encrypted password of the user
        refreshToken:
          type: string
          description: Refresh token for the user session
        profilePictureID:
          type: integer
          description: ID of the user's profile picture
        disabled:
          type: boolean
          description: Indicates if the user's account is disabled
        accessibilitySettings:
          $ref: '#/components/schemas/AccessibilitySettings'
    UserStats:
      type: object
      properties:
        matches_won:
          type: integer
          description: Number of matches won
        matches_lost:
          type: integer
          description: Number of matches lost
        matches_drawn:
          type: integer
          description: Number of matches drawn
    MatchStatus:
      type: object
      properties:
        matchState:
          type: string
          enum: [ PLAYING, VICTORY, DRAW ]
        players:
          type: array
          items:
            $ref: '#/components/schemas/User'
        nextPlayer:
          type: string
        abandoned:
          type: boolean
    Match:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        matchStatus:
          $ref: '#/components/schemas/MatchStatus'
        attempts:
          type: array
          items:
            $ref: '#/components/schemas/Attempt'
        secretCode:
          $ref: '#/components/schemas/ColorSequence'
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
